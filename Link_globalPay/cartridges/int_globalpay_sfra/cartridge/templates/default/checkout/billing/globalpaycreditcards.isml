  <isset name="gp_AuthenticationsUrl" value="${require('dw/web/URLUtils').url('GlobalPay-Authentications').toString()}" scope="page"/>
  <div id="gpayerror"></div> 
 <form id="payment-form" action="/Payment/Charge" method="post">
    <!-- Other input fields to capture relevant data -->
    <!-- Target for the credit card form -->
    <div id="credit-card"></div>
</form>

<!--<script src="https://js.globalpay.com/v1/globalpayments.js"></script>-->

<script src="${URLUtils.staticURL('/js/local-globalpayments.js')}"></script>
<script src="${URLUtils.staticURL('/js/globalpayments-3ds.js')}"></script>
<link rel="stylesheet" href="${URLUtils.staticURL('/css/paymentbuttons.css')}" />
<script defer type="text/javascript">
// Configure account
GlobalPayments.configure({
    accessToken: '${pdict.token}',
    env: '${pdict.env}', // or "production"
    currency: '${pdict.currency}',
    country:'${pdict.country}',
    gpaymerchantid:'${pdict.gpaymerchantid}',
    gpaymerchantname:'${pdict.gpaymerchantname}',
    gpayenv:'${pdict.gpayenv}'
});

// Create Form
const cardForm = GlobalPayments.creditCard.form("#credit-card", { style: "local-gp-default" });


function gatherBrowserData() {
  var javaEnabled = navigator.javaEnabled();
  var browserLanguage = navigator.language;
  var screenHeight = screen.height;
  var screenWidth = screen.width;
  var userAgent = navigator.userAgent;
  var browserTime = new Date();
  var browserTimezoneZoneOffset = browserTime.getTimezoneOffset();
  var clientData = new Object();
  clientData.colorDepth = screen.colorDepth;
  clientData.javaEnabled = navigator.javaEnabled();
  clientData.browserLanguage = navigator.language; // en_US
  clientData.screenHeight = screen.height; // 1080
  clientData.screenWidth = screen.width; // 1920
  clientData.userAgent = navigator.userAgent;
  clientData.browserTime = browserTime.getTimezoneOffset();// 0
 return clientData;
}

document.getElementById("threedsdata").value = JSON.stringify(gatherBrowserData());

const cvvList = document.querySelectorAll("#saved-payment-security-code");
if (cvvList.length) {
  for (let i = 0; i < cvvList.length; i++) {
    cvvList[i].addEventListener("keypress", isNumberKey, false);
    }
}

function isNumberKey(evt){
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode == 46 || charCode > 31 && (charCode < 48 || charCode > 57)){
        evt.preventDefault();
        return false;
    }
    return true;
}

cardForm.on("token-success", (resp) => {
    // add payment token to form as a hidden input
    const token = document.createElement("input");
    token.type = "hidden";
    token.name = "payment_token";
    token.value = resp.paymentReference; 
    $('#gpayerror').text('');
    $("input[name='dwfrm_billing_creditCardFields_cardNumber']").val(resp.details.cardNumber);
    $('#cardType').val(resp.details.cardType.charAt(0).toUpperCase()+resp.details.cardType.substring(1, resp.details.cardType.length));
    $("#expirationMonth").val(parseInt(resp.details.expiryMonth, 10));
    $("#expirationYear").val(resp.details.expiryYear);
    $("#paymentId").val(JSON.stringify(resp));
    $("#threedsdata").val(JSON.stringify(gatherBrowserData()));
    if($("#expirationYear").val()){
   $( ".submit-payment" ).trigger( "click" );
          
          const {
                checkVersion,
                getBrowserData,
                initiateAuthentication,
                ChallengeWindowSize,
            } = GlobalPayments.ThreeDSecure;

            try {
                    checkVersion('GlobalPay-Authentication', {
                        card: {
                            reference: resp.paymentReference
                        },
                    }).then( function( versionCheckData ) {
                        if ( versionCheckData.error ) {

                        }else{
                          console.log('::::'+versionCheckData.id);
                          $("#authId").val(versionCheckData.id);
                           // setTimeout(Initate,1000)
                       // function Initate(){
                                try {
                                    authenticationData = initiateAuthentication('GlobalPay-Initiation', {
                                    serverTransactionId: versionCheckData.serverTransactionId,
                                    challengeNotificationUrl:'',
                                    authId: versionCheckData.id,
                                    methodUrlComplete: true,
                                    card: {
                                        reference: resp.paymentReference
                                    },
                                    challengeWindow: {
                                        windowSize: ChallengeWindowSize.Windowed600x400,
                                        displayMode: 'lightbox',
                                    }
                                    // order: {}, // optional if data available on client-side
                                    // payer: {}, // optional if data available on client-side
                                });
                                console.log('Authentication Data', authenticationData);
                                }
                                catch(e){
                                }
                            //}
                        }

                    });

                 }

                 catch (e) {
                    // TODO: add your error handling here
                 }



    return false;
    
    form.appendChild(token);
    form.submit();
    }
    else{
      $('#gpayerror').text('Card details are not valid, please enter valid card details.');  
    }
});

cardForm.on("token-error", (resp) => {
    // show error to the consumers
    $('#gpayerror').text('Card details are not valid, please enter valid card details.'); 
});
</script>
